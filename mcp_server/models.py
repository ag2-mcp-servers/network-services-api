# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:33:01+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class CancelOperationRequest(BaseModel):
    pass


class Empty(BaseModel):
    pass


class Type(Enum):
    ENDPOINT_POLICY_TYPE_UNSPECIFIED = 'ENDPOINT_POLICY_TYPE_UNSPECIFIED'
    SIDECAR_PROXY = 'SIDECAR_PROXY'
    GRPC_SERVER = 'GRPC_SERVER'


class Expr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class Type1(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    OPEN_MESH = 'OPEN_MESH'
    SECURE_WEB_GATEWAY = 'SECURE_WEB_GATEWAY'


class Gateway(BaseModel):
    addresses: Optional[List[str]] = Field(
        None,
        description="Optional. Zero or one IPv4-address on which the Gateway will receive the traffic. When no address is provided, an IP from the subnetwork is allocated This field only applies to gateways of type 'SECURE_WEB_GATEWAY'. Gateways of type 'OPEN_MESH' listen on 0.0.0.0.",
    )
    certificateUrls: Optional[List[str]] = Field(
        None,
        description="Optional. A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection. This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.",
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was created.'
    )
    description: Optional[str] = Field(
        None,
        description='Optional. A free-text description of the resource. Max length 1024 characters.',
    )
    gatewaySecurityPolicy: Optional[str] = Field(
        None,
        description="Optional. A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections. For example: `projects/*/locations/*/gatewaySecurityPolicies/swg-policy`. This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.",
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Set of label tags associated with the Gateway resource.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Name of the Gateway resource. It matches pattern `projects/*/locations/*/gateways/`.',
    )
    network: Optional[str] = Field(
        None,
        description="Optional. The relative resource name identifying the VPC network that is using this configuration. For example: `projects/*/global/networks/network-1`. Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.",
    )
    ports: Optional[List[int]] = Field(
        None,
        description="Required. One or more port numbers (1-65535), on which the Gateway will receive traffic. The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are limited to 1 port. Gateways of type 'OPEN_MESH' listen on 0.0.0.0 and support multiple ports.",
    )
    scope: Optional[str] = Field(
        None,
        description='Optional. Scope determines how configuration across multiple Gateway instances are merged. The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer. Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.',
    )
    selfLink: Optional[str] = Field(
        None, description='Output only. Server-defined URL of this resource'
    )
    serverTlsPolicy: Optional[str] = Field(
        None,
        description='Optional. A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.',
    )
    subnetwork: Optional[str] = Field(
        None,
        description='Optional. The relative resource name identifying the subnetwork in which this SWG is allocated. For example: `projects/*/regions/us-central1/subnetworks/network-1` Currently, this field is specific to gateways of type \'SECURE_WEB_GATEWAY".',
    )
    type: Optional[Type1] = Field(
        None,
        description='Immutable. The type of the customer managed gateway. This field is required. If unspecified, an error is returned.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was updated.'
    )


class GrpcRouteDestination(BaseModel):
    serviceName: Optional[str] = Field(
        None,
        description='Required. The URL of a destination service to which to route traffic. Must refer to either a BackendService or ServiceDirectoryService.',
    )
    weight: Optional[int] = Field(
        None,
        description='Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.',
    )


class GrpcRouteFaultInjectionPolicyAbort(BaseModel):
    httpStatus: Optional[int] = Field(
        None,
        description='The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.',
    )
    percentage: Optional[int] = Field(
        None,
        description='The percentage of traffic which will be aborted. The value must be between [0, 100]',
    )


class GrpcRouteFaultInjectionPolicyDelay(BaseModel):
    fixedDelay: Optional[str] = Field(
        None, description='Specify a fixed delay before forwarding the request.'
    )
    percentage: Optional[int] = Field(
        None,
        description='The percentage of traffic on which delay will be injected. The value must be between [0, 100]',
    )


class Type2(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    EXACT = 'EXACT'
    REGULAR_EXPRESSION = 'REGULAR_EXPRESSION'


class GrpcRouteHeaderMatch(BaseModel):
    key: Optional[str] = Field(None, description='Required. The key of the header.')
    type: Optional[Type2] = Field(
        None,
        description='Optional. Specifies how to match against the value of the header. If not specified, a default value of EXACT is used.',
    )
    value: Optional[str] = Field(None, description='Required. The value of the header.')


class GrpcRouteMethodMatch(BaseModel):
    caseSensitive: Optional[bool] = Field(
        None,
        description='Optional. Specifies that matches are case sensitive. The default value is true. case_sensitive must not be used with a type of REGULAR_EXPRESSION.',
    )
    grpcMethod: Optional[str] = Field(
        None,
        description='Required. Name of the method to match against. If unspecified, will match all methods.',
    )
    grpcService: Optional[str] = Field(
        None,
        description='Required. Name of the service to match against. If unspecified, will match all services.',
    )
    type: Optional[Type2] = Field(
        None,
        description='Optional. Specifies how to match against the name. If not specified, a default value of "EXACT" is used.',
    )


class GrpcRouteRetryPolicy(BaseModel):
    numRetries: Optional[int] = Field(
        None,
        description='Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.',
    )
    retryConditions: Optional[List[str]] = Field(
        None,
        description='- connect-failure: Router will retry on failures connecting to Backend Services, for example due to connection timeouts. - refused-stream: Router will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: Router will retry if the gRPC status code in the response header is set to cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response header is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in the response header is set to resource-exhausted - unavailable: Router will retry if the gRPC status code in the response header is set to unavailable',
    )


class GrpcRouteRouteMatch(BaseModel):
    headers: Optional[List[GrpcRouteHeaderMatch]] = Field(
        None, description='Optional. Specifies a collection of headers to match.'
    )
    method: Optional[GrpcRouteMethodMatch] = Field(
        None,
        description='Optional. A gRPC method to match against. If this field is empty or omitted, will match all methods.',
    )


class HttpRouteCorsPolicy(BaseModel):
    allowCredentials: Optional[bool] = Field(
        None,
        description='In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default value is false.',
    )
    allowHeaders: Optional[List[str]] = Field(
        None,
        description='Specifies the content for Access-Control-Allow-Headers header.',
    )
    allowMethods: Optional[List[str]] = Field(
        None,
        description='Specifies the content for Access-Control-Allow-Methods header.',
    )
    allowOriginRegexes: Optional[List[str]] = Field(
        None,
        description='Specifies the regular expression patterns that match allowed origins. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax.',
    )
    allowOrigins: Optional[List[str]] = Field(
        None,
        description='Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allow_origins or an item in allow_origin_regexes.',
    )
    disabled: Optional[bool] = Field(
        None,
        description='If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.',
    )
    exposeHeaders: Optional[List[str]] = Field(
        None,
        description='Specifies the content for Access-Control-Expose-Headers header.',
    )
    maxAge: Optional[str] = Field(
        None,
        description='Specifies how long result of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.',
    )


class HttpRouteDestination(BaseModel):
    serviceName: Optional[str] = Field(
        None, description='The URL of a BackendService to route traffic to.'
    )
    weight: Optional[int] = Field(
        None,
        description='Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.',
    )


class HttpRouteFaultInjectionPolicyAbort(BaseModel):
    httpStatus: Optional[int] = Field(
        None,
        description='The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.',
    )
    percentage: Optional[int] = Field(
        None,
        description='The percentage of traffic which will be aborted. The value must be between [0, 100]',
    )


class HttpRouteFaultInjectionPolicyDelay(BaseModel):
    fixedDelay: Optional[str] = Field(
        None, description='Specify a fixed delay before forwarding the request.'
    )
    percentage: Optional[int] = Field(
        None,
        description='The percentage of traffic on which delay will be injected. The value must be between [0, 100]',
    )


class HttpRouteHeaderMatchIntegerRange(BaseModel):
    end: Optional[int] = Field(None, description='End of the range (exclusive)')
    start: Optional[int] = Field(None, description='Start of the range (inclusive)')


class HttpRouteHeaderModifier(BaseModel):
    add: Optional[Dict[str, str]] = Field(
        None,
        description='Add the headers with given map where key is the name of the header, value is the value of the header.',
    )
    remove: Optional[List[str]] = Field(
        None,
        description='Remove headers (matching by header names) specified in the list.',
    )
    set: Optional[Dict[str, str]] = Field(
        None,
        description='Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.',
    )


class HttpRouteQueryParameterMatch(BaseModel):
    exactMatch: Optional[str] = Field(
        None,
        description='The value of the query parameter must exactly match the contents of exact_match. Only one of exact_match, regex_match, or present_match must be set.',
    )
    presentMatch: Optional[bool] = Field(
        None,
        description='Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not. Only one of exact_match, regex_match, or present_match must be set.',
    )
    queryParameter: Optional[str] = Field(
        None, description='The name of the query parameter to match.'
    )
    regexMatch: Optional[str] = Field(
        None,
        description='The value of the query parameter must match the regular expression specified by regex_match. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of exact_match, regex_match, or present_match must be set.',
    )


class ResponseCode(Enum):
    RESPONSE_CODE_UNSPECIFIED = 'RESPONSE_CODE_UNSPECIFIED'
    MOVED_PERMANENTLY_DEFAULT = 'MOVED_PERMANENTLY_DEFAULT'
    FOUND = 'FOUND'
    SEE_OTHER = 'SEE_OTHER'
    TEMPORARY_REDIRECT = 'TEMPORARY_REDIRECT'
    PERMANENT_REDIRECT = 'PERMANENT_REDIRECT'


class HttpRouteRedirect(BaseModel):
    hostRedirect: Optional[str] = Field(
        None,
        description='The host that will be used in the redirect response instead of the one that was supplied in the request.',
    )
    httpsRedirect: Optional[bool] = Field(
        None,
        description='If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. The default is set to false.',
    )
    pathRedirect: Optional[str] = Field(
        None,
        description='The path that will be used in the redirect response instead of the one that was supplied in the request. path_redirect can not be supplied together with prefix_redirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.',
    )
    portRedirect: Optional[int] = Field(
        None,
        description='The port that will be used in the redirected request instead of the one that was supplied in the request.',
    )
    prefixRewrite: Optional[str] = Field(
        None,
        description='Indicates that during redirection, the matched prefix (or path) should be swapped with this value. This option allows URLs be dynamically created based on the request.',
    )
    responseCode: Optional[ResponseCode] = Field(
        None, description='The HTTP Status code to use for the redirect.'
    )
    stripQuery: Optional[bool] = Field(
        None,
        description='if set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.',
    )


class HttpRouteRequestMirrorPolicy(BaseModel):
    destination: Optional[HttpRouteDestination] = Field(
        None,
        description='The destination the requests will be mirrored to. The weight of the destination will be ignored.',
    )


class HttpRouteRetryPolicy(BaseModel):
    numRetries: Optional[int] = Field(
        None,
        description='Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.',
    )
    perTryTimeout: Optional[str] = Field(
        None, description='Specifies a non-zero timeout per retry attempt.'
    )
    retryConditions: Optional[List[str]] = Field(
        None,
        description='Specifies one or more conditions when this retry policy applies. Valid values are: 5xx: Proxy will attempt a retry if the destination service responds with any 5xx response code, of if the destination service does not respond at all, example: disconnect, reset, read timeout, connection failure and refused streams. gateway-error: Similar to 5xx, but only applies to response codes 502, 503, 504. reset: Proxy will attempt a retry if the destination service does not respond at all (disconnect/reset/read timeout) connect-failure: Proxy will retry on failures connecting to destination for example due to connection timeouts. retriable-4xx: Proxy will retry fro retriable 4xx response codes. Currently the only retriable error supported is 409. refused-stream: Proxy will retry if the destination resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.',
    )


class HttpRouteURLRewrite(BaseModel):
    hostRewrite: Optional[str] = Field(
        None,
        description='Prior to forwarding the request to the selected destination, the requests host header is replaced by this value.',
    )
    pathPrefixRewrite: Optional[str] = Field(
        None,
        description='Prior to forwarding the request to the selected destination, the matching portion of the requests path is replaced by this value.',
    )


class ListGatewaysResponse(BaseModel):
    gateways: Optional[List[Gateway]] = Field(
        None, description='List of Gateway resources.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )


class Location(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The friendly name for this location, typically a nearby city name. For example, "Tokyo".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}',
    )
    locationId: Optional[str] = Field(
        None,
        description='The canonical id for this location. For example: `"us-east1"`.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata. For example the available capacity at the given location.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`',
    )


class Mesh(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was created.'
    )
    description: Optional[str] = Field(
        None,
        description='Optional. A free-text description of the resource. Max length 1024 characters.',
    )
    interceptionPort: Optional[int] = Field(
        None,
        description="Optional. If set to a valid TCP port (1-65535), instructs the SIDECAR proxy to listen on the specified port of localhost (127.0.0.1) address. The SIDECAR proxy will expect all traffic to be redirected to this port regardless of its actual ip:port destination. If unset, a port '15001' is used as the interception port. This will is applicable only for sidecar proxy deployments.",
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Set of label tags associated with the Mesh resource.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Name of the Mesh resource. It matches pattern `projects/*/locations/global/meshes/`.',
    )
    selfLink: Optional[str] = Field(
        None, description='Output only. Server-defined URL of this resource'
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was updated.'
    )


class MetadataLabelMatchCriteria(Enum):
    METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED = (
        'METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED'
    )
    MATCH_ANY = 'MATCH_ANY'
    MATCH_ALL = 'MATCH_ALL'


class MetadataLabels(BaseModel):
    labelName: Optional[str] = Field(
        None, description='Required. Label name presented as key in xDS Node Metadata.'
    )
    labelValue: Optional[str] = Field(
        None,
        description='Required. Label value presented as value corresponding to the above key, in xDS Node Metadata.',
    )


class OperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class ServiceBinding(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was created.'
    )
    description: Optional[str] = Field(
        None,
        description='Optional. A free-text description of the resource. Max length 1024 characters.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Set of label tags associated with the ServiceBinding resource.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Name of the ServiceBinding resource. It matches pattern `projects/*/locations/global/serviceBindings/service_binding_name`.',
    )
    service: Optional[str] = Field(
        None,
        description='Required. The full Service Directory Service name of the format projects/*/locations/*/namespaces/*/services/*',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was updated.'
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class TcpRouteRouteDestination(BaseModel):
    serviceName: Optional[str] = Field(
        None, description='Required. The URL of a BackendService to route traffic to.'
    )
    weight: Optional[int] = Field(
        None,
        description='Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.',
    )


class TcpRouteRouteMatch(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Required. Must be specified in the CIDR range format. A CIDR range consists of an IP Address and a prefix length to construct the subnet mask. By default, the prefix length is 32 (i.e. matches a single IP address). Only IPV4 addresses are supported. Examples: "10.0.0.1" - matches against this exact IP address. "10.0.0.0/8" - matches against any IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. "0.0.0.0/0" - matches against any IP address\'.',
    )
    port: Optional[str] = Field(
        None, description='Required. Specifies the destination port to match against.'
    )


class TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class TlsRouteRouteDestination(BaseModel):
    serviceName: Optional[str] = Field(
        None, description='Required. The URL of a BackendService to route traffic to.'
    )
    weight: Optional[int] = Field(
        None,
        description='Optional. Specifies the proportion of requests forwareded to the backend referenced by the service_name field. This is computed as: weight/Sum(weights in destinations) Weights in all destinations does not need to sum up to 100.',
    )


class TlsRouteRouteMatch(BaseModel):
    alpn: Optional[List[str]] = Field(
        None,
        description='Optional. ALPN (Application-Layer Protocol Negotiation) to match against. Examples: "http/1.1", "h2". At least one of sni_host and alpn is required. Up to 5 alpns across all matches can be set.',
    )
    sniHost: Optional[List[str]] = Field(
        None,
        description='Optional. SNI (server name indicator) to match against. SNI will be matched against all wildcard domains, i.e. www.example.com will be first matched against www.example.com, then *.example.com, then *.com. Partial wildcards are not supported, and values like *w.example.com are invalid. At least one of sni_host and alpn is required. Up to 5 sni hosts across all matches can be set.',
    )


class TrafficPortSelector(BaseModel):
    ports: Optional[List[str]] = Field(
        None,
        description='Optional. A list of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.',
    )


class Binding(BaseModel):
    condition: Optional[Expr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class GrpcRouteFaultInjectionPolicy(BaseModel):
    abort: Optional[GrpcRouteFaultInjectionPolicyAbort] = Field(
        None, description='The specification for aborting to client requests.'
    )
    delay: Optional[GrpcRouteFaultInjectionPolicyDelay] = Field(
        None, description='The specification for injecting delay to client requests.'
    )


class GrpcRouteRouteAction(BaseModel):
    destinations: Optional[List[GrpcRouteDestination]] = Field(
        None,
        description='Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.',
    )
    faultInjectionPolicy: Optional[GrpcRouteFaultInjectionPolicy] = Field(
        None,
        description='Optional. The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy',
    )
    retryPolicy: Optional[GrpcRouteRetryPolicy] = Field(
        None,
        description='Optional. Specifies the retry policy associated with this route.',
    )
    timeout: Optional[str] = Field(
        None,
        description='Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.',
    )


class GrpcRouteRouteRule(BaseModel):
    action: Optional[GrpcRouteRouteAction] = Field(
        None,
        description='Required. A detailed rule defining how to route traffic. This field is required.',
    )
    matches: Optional[List[GrpcRouteRouteMatch]] = Field(
        None,
        description='Optional. Matches define conditions used for matching the rule against incoming gRPC requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic.',
    )


class HttpRouteFaultInjectionPolicy(BaseModel):
    abort: Optional[HttpRouteFaultInjectionPolicyAbort] = Field(
        None, description='The specification for aborting to client requests.'
    )
    delay: Optional[HttpRouteFaultInjectionPolicyDelay] = Field(
        None, description='The specification for injecting delay to client requests.'
    )


class HttpRouteHeaderMatch(BaseModel):
    exactMatch: Optional[str] = Field(
        None,
        description='The value of the header should match exactly the content of exact_match.',
    )
    header: Optional[str] = Field(
        None, description='The name of the HTTP header to match against.'
    )
    invertMatch: Optional[bool] = Field(
        None,
        description='If specified, the match result will be inverted before checking. Default value is set to false.',
    )
    prefixMatch: Optional[str] = Field(
        None,
        description='The value of the header must start with the contents of prefix_match.',
    )
    presentMatch: Optional[bool] = Field(
        None,
        description='A header with header_name must exist. The match takes place whether or not the header has a value.',
    )
    rangeMatch: Optional[HttpRouteHeaderMatchIntegerRange] = Field(
        None,
        description='If specified, the rule will match if the request header value is within the range.',
    )
    regexMatch: Optional[str] = Field(
        None,
        description='The value of the header must match the regular expression specified in regex_match. For regular expression grammar, please see: https://github.com/google/re2/wiki/Syntax',
    )
    suffixMatch: Optional[str] = Field(
        None,
        description='The value of the header must end with the contents of suffix_match.',
    )


class HttpRouteRouteAction(BaseModel):
    corsPolicy: Optional[HttpRouteCorsPolicy] = Field(
        None,
        description='The specification for allowing client side cross-origin requests.',
    )
    destinations: Optional[List[HttpRouteDestination]] = Field(
        None, description='The destination to which traffic should be forwarded.'
    )
    faultInjectionPolicy: Optional[HttpRouteFaultInjectionPolicy] = Field(
        None,
        description='The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy',
    )
    redirect: Optional[HttpRouteRedirect] = Field(
        None, description='If set, the request is directed as configured by this field.'
    )
    requestHeaderModifier: Optional[HttpRouteHeaderModifier] = Field(
        None,
        description='The specification for modifying the headers of a matching request prior to delivery of the request to the destination.',
    )
    requestMirrorPolicy: Optional[HttpRouteRequestMirrorPolicy] = Field(
        None,
        description='Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination. Proxy will not wait for the shadow destination to respond before returning the response. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.',
    )
    responseHeaderModifier: Optional[HttpRouteHeaderModifier] = Field(
        None,
        description='The specification for modifying the headers of a response prior to sending the response back to the client.',
    )
    retryPolicy: Optional[HttpRouteRetryPolicy] = Field(
        None, description='Specifies the retry policy associated with this route.'
    )
    timeout: Optional[str] = Field(
        None,
        description='Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.',
    )
    urlRewrite: Optional[HttpRouteURLRewrite] = Field(
        None,
        description='The specification for rewrite URL before forwarding requests to the destination.',
    )


class HttpRouteRouteMatch(BaseModel):
    fullPathMatch: Optional[str] = Field(
        None,
        description='The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.',
    )
    headers: Optional[List[HttpRouteHeaderMatch]] = Field(
        None,
        description='Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.',
    )
    ignoreCase: Optional[bool] = Field(
        None,
        description='Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.',
    )
    prefixMatch: Optional[str] = Field(
        None,
        description='The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.',
    )
    queryParameters: Optional[List[HttpRouteQueryParameterMatch]] = Field(
        None,
        description='Specifies a list of query parameters to match against. ALL of the query parameters must be matched.',
    )
    regexMatch: Optional[str] = Field(
        None,
        description='The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.',
    )


class HttpRouteRouteRule(BaseModel):
    action: Optional[HttpRouteRouteAction] = Field(
        None, description='The detailed rule defining how to route matched traffic.'
    )
    matches: Optional[List[HttpRouteRouteMatch]] = Field(
        None,
        description='A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic. If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.',
    )


class ListLocationsResponse(BaseModel):
    locations: Optional[List[Location]] = Field(
        None,
        description='A list of locations that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )


class ListMeshesResponse(BaseModel):
    meshes: Optional[List[Mesh]] = Field(None, description='List of Mesh resources.')
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )


class ListServiceBindingsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )
    serviceBindings: Optional[List[ServiceBinding]] = Field(
        None, description='List of ServiceBinding resources.'
    )


class MetadataLabelMatcher(BaseModel):
    metadataLabelMatchCriteria: Optional[MetadataLabelMatchCriteria] = Field(
        None,
        description='Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.',
    )
    metadataLabels: Optional[List[MetadataLabels]] = Field(
        None,
        description='The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).',
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class Policy(BaseModel):
    auditConfigs: Optional[List[AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class SetIamPolicyRequest(BaseModel):
    policy: Optional[Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`',
    )


class TcpRouteRouteAction(BaseModel):
    destinations: Optional[List[TcpRouteRouteDestination]] = Field(
        None,
        description='Optional. The destination services to which traffic should be forwarded. At least one destination service is required.',
    )
    originalDestination: Optional[bool] = Field(
        None,
        description='Optional. If true, Router will use the destination IP and port of the original connection as the destination of the request. Default is false.',
    )


class TcpRouteRouteRule(BaseModel):
    action: Optional[TcpRouteRouteAction] = Field(
        None,
        description='Required. The detailed rule defining how to route matched traffic.',
    )
    matches: Optional[List[TcpRouteRouteMatch]] = Field(
        None,
        description='Optional. RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.',
    )


class TlsRouteRouteAction(BaseModel):
    destinations: Optional[List[TlsRouteRouteDestination]] = Field(
        None,
        description='Required. The destination services to which traffic should be forwarded. At least one destination service is required.',
    )


class TlsRouteRouteRule(BaseModel):
    action: Optional[TlsRouteRouteAction] = Field(
        None,
        description='Required. The detailed rule defining how to route matched traffic.',
    )
    matches: Optional[List[TlsRouteRouteMatch]] = Field(
        None,
        description='Required. RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation.',
    )


class EndpointMatcher(BaseModel):
    metadataLabelMatcher: Optional[MetadataLabelMatcher] = Field(
        None,
        description='The matcher is based on node metadata presented by xDS clients.',
    )


class EndpointPolicy(BaseModel):
    authorizationPolicy: Optional[str] = Field(
        None,
        description='Optional. This field specifies the URL of AuthorizationPolicy resource that applies authorization policies to the inbound traffic at the matched endpoints. Refer to Authorization. If this field is not specified, authorization is disabled(no authz checks) for this endpoint.',
    )
    clientTlsPolicy: Optional[str] = Field(
        None,
        description='Optional. A URL referring to a ClientTlsPolicy resource. ClientTlsPolicy can be set to specify the authentication for traffic from the proxy to the actual endpoints. More specifically, it is applied to the outgoing traffic from the proxy to the endpoint. This is typically used for sidecar model where the proxy identifies itself as endpoint to the control plane, with the connection between sidecar and endpoint requiring authentication. If this field is not set, authentication is disabled(open). Applicable only when EndpointPolicyType is SIDECAR_PROXY.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was created.'
    )
    description: Optional[str] = Field(
        None,
        description='Optional. A free-text description of the resource. Max length 1024 characters.',
    )
    endpointMatcher: Optional[EndpointMatcher] = Field(
        None,
        description='Required. A matcher that selects endpoints to which the policies should be applied.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Set of label tags associated with the EndpointPolicy resource.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Name of the EndpointPolicy resource. It matches pattern `projects/{project}/locations/global/endpointPolicies/{endpoint_policy}`.',
    )
    serverTlsPolicy: Optional[str] = Field(
        None,
        description='Optional. A URL referring to ServerTlsPolicy resource. ServerTlsPolicy is used to determine the authentication policy to be applied to terminate the inbound traffic at the identified backends. If this field is not set, authentication is disabled(open) for this endpoint.',
    )
    trafficPortSelector: Optional[TrafficPortSelector] = Field(
        None,
        description='Optional. Port selector for the (matched) endpoints. If no port selector is provided, the matched config is applied to all ports.',
    )
    type: Optional[Type] = Field(
        None,
        description='Required. The type of endpoint policy. This is primarily used to validate the configuration.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was updated.'
    )


class GrpcRoute(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was created.'
    )
    description: Optional[str] = Field(
        None,
        description='Optional. A free-text description of the resource. Max length 1024 characters.',
    )
    gateways: Optional[List[str]] = Field(
        None,
        description='Optional. Gateways defines a list of gateways this GrpcRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`',
    )
    hostnames: Optional[List[str]] = Field(
        None,
        description='Required. Service hostnames with an optional port for which this route describes traffic. Format: [:] Hostname is the fully qualified domain name of a network host. This matches the RFC 1123 definition of a hostname with 2 notable exceptions: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (*.). The wildcard label must appear by itself as the first label. Hostname can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.example.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. *.example.com). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or \'-\', and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateway must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames "*.foo.bar.com" and "*.bar.com" to be associated with the same route, it is not possible to associate two routes both with "*.bar.com" or both with "bar.com". If a port is specified, then gRPC clients must use the channel URI with the port to match this rule (i.e. "xds:///service:123"), otherwise they must supply the URI without a port (i.e. "xds:///service").',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Set of label tags associated with the GrpcRoute resource.',
    )
    meshes: Optional[List[str]] = Field(
        None,
        description='Optional. Meshes defines a list of meshes this GrpcRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/`',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Name of the GrpcRoute resource. It matches pattern `projects/*/locations/global/grpcRoutes/`',
    )
    rules: Optional[List[GrpcRouteRouteRule]] = Field(
        None,
        description='Required. A list of detailed rules defining how to route traffic. Within a single GrpcRoute, the GrpcRoute.RouteAction associated with the first matching GrpcRoute.RouteRule will be executed. At least one rule must be supplied.',
    )
    selfLink: Optional[str] = Field(
        None, description='Output only. Server-defined URL of this resource'
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was updated.'
    )


class HttpRoute(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was created.'
    )
    description: Optional[str] = Field(
        None,
        description='Optional. A free-text description of the resource. Max length 1024 characters.',
    )
    gateways: Optional[List[str]] = Field(
        None,
        description='Optional. Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`',
    )
    hostnames: Optional[List[str]] = Field(
        None,
        description='Required. Hostnames define a set of hosts that should match against the HTTP host header to select a HttpRoute to process the request. Hostname is the fully qualified domain name of a network host, as defined by RFC 1123 with the exception that: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (*.). The wildcard label must appear by itself as the first label. Hostname can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.example.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. *.example.com). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or \'-\', and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateways must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames "*.foo.bar.com" and "*.bar.com" to be associated with the same Mesh (or Gateways under the same scope), it is not possible to associate two routes both with "*.bar.com" or both with "bar.com".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Set of label tags associated with the HttpRoute resource.',
    )
    meshes: Optional[List[str]] = Field(
        None,
        description='Optional. Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Name of the HttpRoute resource. It matches pattern `projects/*/locations/global/httpRoutes/http_route_name>`.',
    )
    rules: Optional[List[HttpRouteRouteRule]] = Field(
        None,
        description='Required. Rules that define how traffic is routed and handled. Rules will be matched sequentially based on the RouteMatch specified for the rule.',
    )
    selfLink: Optional[str] = Field(
        None, description='Output only. Server-defined URL of this resource'
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was updated.'
    )


class ListEndpointPoliciesResponse(BaseModel):
    endpointPolicies: Optional[List[EndpointPolicy]] = Field(
        None, description='List of EndpointPolicy resources.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )


class ListGrpcRoutesResponse(BaseModel):
    grpcRoutes: Optional[List[GrpcRoute]] = Field(
        None, description='List of GrpcRoute resources.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )


class ListHttpRoutesResponse(BaseModel):
    httpRoutes: Optional[List[HttpRoute]] = Field(
        None, description='List of HttpRoute resources.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )


class ListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[Operation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


class TcpRoute(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was created.'
    )
    description: Optional[str] = Field(
        None,
        description='Optional. A free-text description of the resource. Max length 1024 characters.',
    )
    gateways: Optional[List[str]] = Field(
        None,
        description='Optional. Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Set of label tags associated with the TcpRoute resource.',
    )
    meshes: Optional[List[str]] = Field(
        None,
        description='Optional. Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Name of the TcpRoute resource. It matches pattern `projects/*/locations/global/tcpRoutes/tcp_route_name>`.',
    )
    rules: Optional[List[TcpRouteRouteRule]] = Field(
        None,
        description='Required. Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.',
    )
    selfLink: Optional[str] = Field(
        None, description='Output only. Server-defined URL of this resource'
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was updated.'
    )


class TlsRoute(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was created.'
    )
    description: Optional[str] = Field(
        None,
        description='Optional. A free-text description of the resource. Max length 1024 characters.',
    )
    gateways: Optional[List[str]] = Field(
        None,
        description='Optional. Gateways defines a list of gateways this TlsRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`',
    )
    meshes: Optional[List[str]] = Field(
        None,
        description='Optional. Meshes defines a list of meshes this TlsRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Name of the TlsRoute resource. It matches pattern `projects/*/locations/global/tlsRoutes/tls_route_name>`.',
    )
    rules: Optional[List[TlsRouteRouteRule]] = Field(
        None,
        description='Required. Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.',
    )
    selfLink: Optional[str] = Field(
        None, description='Output only. Server-defined URL of this resource'
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the resource was updated.'
    )


class ListTcpRoutesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )
    tcpRoutes: Optional[List[TcpRoute]] = Field(
        None, description='List of TcpRoute resources.'
    )


class ListTlsRoutesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )
    tlsRoutes: Optional[List[TlsRoute]] = Field(
        None, description='List of TlsRoute resources.'
    )
